//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Hack4Europe
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[39];
            _typeNameTable[0] = "Hack4Europe.Utils.DomoItemVisibilityConverters";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Hack4Europe.Utils.ActionCubeNumberVisibilityConverters";
            _typeNameTable[3] = "Windows.UI.Color";
            _typeNameTable[4] = "System.ValueType";
            _typeNameTable[5] = "Byte";
            _typeNameTable[6] = "Hack4Europe.MainPage";
            _typeNameTable[7] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[8] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[9] = "Hack4Europe.UserControls.ActionCubeControl";
            _typeNameTable[10] = "String";
            _typeNameTable[11] = "Windows.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[12] = "Hack4Europe.UserControls.ActionCubeControl.ActionType";
            _typeNameTable[13] = "System.Enum";
            _typeNameTable[14] = "Hack4Europe.UserControls.BlueLineControl";
            _typeNameTable[15] = "Hack4Europe.UserControls.DomoItemControl";
            _typeNameTable[16] = "Hack4Europe.UserControls.MainViewGridControl";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.UIElementCollection";
            _typeNameTable[18] = "Hack4Europe.UserControls.GenericActionControl";
            _typeNameTable[19] = "Hack4Europe.UserControls.HomePageItemControl";
            _typeNameTable[20] = "Hack4Europe.UserControls.HomePageItemControl.HomePageItemType";
            _typeNameTable[21] = "Hack4Europe.ViewModel.MainViewGridViewModel";
            _typeNameTable[22] = "Hack4Europe.ViewModel.CommonViewModel";
            _typeNameTable[23] = "Hack4Europe.ViewModel.ViewModelBase";
            _typeNameTable[24] = "Boolean";
            _typeNameTable[25] = "Hack4Europe.View.ActionsView";
            _typeNameTable[26] = "Hack4Europe.View.CompatibilityView";
            _typeNameTable[27] = "Hack4Europe.ViewModel.FirstViewViewModel";
            _typeNameTable[28] = "System.Windows.Input.ICommand";
            _typeNameTable[29] = "Hack4Europe.View.FirstPageView";
            _typeNameTable[30] = "Hack4Europe.View.GenericActionView";
            _typeNameTable[31] = "Hack4Europe.ViewModel.HomeViewModel";
            _typeNameTable[32] = "Hack4Europe.View.HomeView";
            _typeNameTable[33] = "Hack4Europe.View.ScenariosView";
            _typeNameTable[34] = "Hack4Europe.ViewModel.SettingsViewModel";
            _typeNameTable[35] = "Hack4Europe.View.SettingsView";
            _typeNameTable[36] = "Hack4Europe.ViewModel.SignInViewModel";
            _typeNameTable[37] = "Hack4Europe.View.SignInView";
            _typeNameTable[38] = "Hack4Europe.View.VoiceRecognitionView";

            _typeTable = new global::System.Type[39];
            _typeTable[0] = typeof(global::Hack4Europe.Utils.DomoItemVisibilityConverters);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::Hack4Europe.Utils.ActionCubeNumberVisibilityConverters);
            _typeTable[3] = typeof(global::Windows.UI.Color);
            _typeTable[4] = typeof(global::System.ValueType);
            _typeTable[5] = typeof(global::System.Byte);
            _typeTable[6] = typeof(global::Hack4Europe.MainPage);
            _typeTable[7] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[8] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[9] = typeof(global::Hack4Europe.UserControls.ActionCubeControl);
            _typeTable[10] = typeof(global::System.String);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Media.SolidColorBrush);
            _typeTable[12] = typeof(global::Hack4Europe.UserControls.ActionCubeControl.ActionType);
            _typeTable[13] = typeof(global::System.Enum);
            _typeTable[14] = typeof(global::Hack4Europe.UserControls.BlueLineControl);
            _typeTable[15] = typeof(global::Hack4Europe.UserControls.DomoItemControl);
            _typeTable[16] = typeof(global::Hack4Europe.UserControls.MainViewGridControl);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.UIElementCollection);
            _typeTable[18] = typeof(global::Hack4Europe.UserControls.GenericActionControl);
            _typeTable[19] = typeof(global::Hack4Europe.UserControls.HomePageItemControl);
            _typeTable[20] = typeof(global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType);
            _typeTable[21] = typeof(global::Hack4Europe.ViewModel.MainViewGridViewModel);
            _typeTable[22] = typeof(global::Hack4Europe.ViewModel.CommonViewModel);
            _typeTable[23] = typeof(global::Hack4Europe.ViewModel.ViewModelBase);
            _typeTable[24] = typeof(global::System.Boolean);
            _typeTable[25] = typeof(global::Hack4Europe.View.ActionsView);
            _typeTable[26] = typeof(global::Hack4Europe.View.CompatibilityView);
            _typeTable[27] = typeof(global::Hack4Europe.ViewModel.FirstViewViewModel);
            _typeTable[28] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[29] = typeof(global::Hack4Europe.View.FirstPageView);
            _typeTable[30] = typeof(global::Hack4Europe.View.GenericActionView);
            _typeTable[31] = typeof(global::Hack4Europe.ViewModel.HomeViewModel);
            _typeTable[32] = typeof(global::Hack4Europe.View.HomeView);
            _typeTable[33] = typeof(global::Hack4Europe.View.ScenariosView);
            _typeTable[34] = typeof(global::Hack4Europe.ViewModel.SettingsViewModel);
            _typeTable[35] = typeof(global::Hack4Europe.View.SettingsView);
            _typeTable[36] = typeof(global::Hack4Europe.ViewModel.SignInViewModel);
            _typeTable[37] = typeof(global::Hack4Europe.View.SignInView);
            _typeTable[38] = typeof(global::Hack4Europe.View.VoiceRecognitionView);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_DomoItemVisibilityConverters() { return new global::Hack4Europe.Utils.DomoItemVisibilityConverters(); }
        private object Activate_2_ActionCubeNumberVisibilityConverters() { return new global::Hack4Europe.Utils.ActionCubeNumberVisibilityConverters(); }
        private object Activate_6_MainPage() { return new global::Hack4Europe.MainPage(); }
        private object Activate_9_ActionCubeControl() { return new global::Hack4Europe.UserControls.ActionCubeControl(); }
        private object Activate_14_BlueLineControl() { return new global::Hack4Europe.UserControls.BlueLineControl(); }
        private object Activate_15_DomoItemControl() { return new global::Hack4Europe.UserControls.DomoItemControl(); }
        private object Activate_16_MainViewGridControl() { return new global::Hack4Europe.UserControls.MainViewGridControl(); }
        private object Activate_18_GenericActionControl() { return new global::Hack4Europe.UserControls.GenericActionControl(); }
        private object Activate_19_HomePageItemControl() { return new global::Hack4Europe.UserControls.HomePageItemControl(); }
        private object Activate_21_MainViewGridViewModel() { return new global::Hack4Europe.ViewModel.MainViewGridViewModel(); }
        private object Activate_22_CommonViewModel() { return new global::Hack4Europe.ViewModel.CommonViewModel(); }
        private object Activate_25_ActionsView() { return new global::Hack4Europe.View.ActionsView(); }
        private object Activate_26_CompatibilityView() { return new global::Hack4Europe.View.CompatibilityView(); }
        private object Activate_27_FirstViewViewModel() { return new global::Hack4Europe.ViewModel.FirstViewViewModel(); }
        private object Activate_29_FirstPageView() { return new global::Hack4Europe.View.FirstPageView(); }
        private object Activate_30_GenericActionView() { return new global::Hack4Europe.View.GenericActionView(); }
        private object Activate_31_HomeViewModel() { return new global::Hack4Europe.ViewModel.HomeViewModel(); }
        private object Activate_32_HomeView() { return new global::Hack4Europe.View.HomeView(); }
        private object Activate_33_ScenariosView() { return new global::Hack4Europe.View.ScenariosView(); }
        private object Activate_34_SettingsViewModel() { return new global::Hack4Europe.ViewModel.SettingsViewModel(); }
        private object Activate_35_SettingsView() { return new global::Hack4Europe.View.SettingsView(); }
        private object Activate_36_SignInViewModel() { return new global::Hack4Europe.ViewModel.SignInViewModel(); }
        private object Activate_37_SignInView() { return new global::Hack4Europe.View.SignInView(); }
        private object Activate_38_VoiceRecognitionView() { return new global::Hack4Europe.View.VoiceRecognitionView(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Hack4Europe.Utils.DomoItemVisibilityConverters
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_DomoItemVisibilityConverters;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Hack4Europe.Utils.ActionCubeNumberVisibilityConverters
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_2_ActionCubeNumberVisibilityConverters;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 3:   //  Windows.UI.Color
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 4:   //  System.ValueType
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 5:   //  Byte
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  Hack4Europe.MainPage
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_6_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  Hack4Europe.UserControls.ActionCubeControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_ActionCubeControl;
                userType.AddMemberName("IconCube");
                userType.AddMemberName("NumberCube");
                userType.AddMemberName("TitleCube");
                userType.AddMemberName("ColorCube");
                userType.AddMemberName("TypeCube");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  String
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Windows.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Hack4Europe.UserControls.ActionCubeControl.ActionType
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Temperature", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Temperature);
                userType.AddEnumValue("Lights", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Lights);
                userType.AddEnumValue("Heater", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Heater);
                userType.AddEnumValue("AC", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.AC);
                userType.AddEnumValue("WallSocket", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.WallSocket);
                userType.AddEnumValue("Security", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Security);
                userType.AddEnumValue("Sensors", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Sensors);
                userType.AddEnumValue("Lamps", global::Hack4Europe.UserControls.ActionCubeControl.ActionType.Lamps);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  System.Enum
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 14:   //  Hack4Europe.UserControls.BlueLineControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_14_BlueLineControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Hack4Europe.UserControls.DomoItemControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_15_DomoItemControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  Hack4Europe.UserControls.MainViewGridControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_16_MainViewGridControl;
                userType.AddMemberName("TopIconLogoUri");
                userType.AddMemberName("TopImageUri");
                userType.AddMemberName("TopTitle");
                userType.AddMemberName("Children");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.UI.Xaml.Controls.UIElementCollection
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Hack4Europe.UserControls.GenericActionControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_18_GenericActionControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 19:   //  Hack4Europe.UserControls.HomePageItemControl
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_19_HomePageItemControl;
                userType.AddMemberName("Title");
                userType.AddMemberName("Icon");
                userType.AddMemberName("Type");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Hack4Europe.UserControls.HomePageItemControl.HomePageItemType
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Scenarios", global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType.Scenarios);
                userType.AddEnumValue("Actions", global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType.Actions);
                userType.AddEnumValue("Compatibility", global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType.Compatibility);
                userType.AddEnumValue("Settings", global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType.Settings);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Hack4Europe.ViewModel.MainViewGridViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.CommonViewModel"));
                userType.Activator = Activate_21_MainViewGridViewModel;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 22:   //  Hack4Europe.ViewModel.CommonViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase"));
                userType.Activator = Activate_22_CommonViewModel;
                userType.AddMemberName("TopIconLogoUri");
                userType.AddMemberName("TopImageUri");
                userType.AddMemberName("TopTitle");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Hack4Europe.ViewModel.ViewModelBase
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("WsOver");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Boolean
                xamlType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Hack4Europe.View.ActionsView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_ActionsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 26:   //  Hack4Europe.View.CompatibilityView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_26_CompatibilityView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 27:   //  Hack4Europe.ViewModel.FirstViewViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase"));
                userType.Activator = Activate_27_FirstViewViewModel;
                userType.AddMemberName("OnClickCommand");
                userType.AddMemberName("Login");
                userType.AddMemberName("Password1");
                userType.AddMemberName("Password2");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  System.Windows.Input.ICommand
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Hack4Europe.View.FirstPageView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_FirstPageView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Hack4Europe.View.GenericActionView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_GenericActionView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Hack4Europe.ViewModel.HomeViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase"));
                userType.Activator = Activate_31_HomeViewModel;
                userType.AddMemberName("VoiceCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  Hack4Europe.View.HomeView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_32_HomeView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Hack4Europe.View.ScenariosView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_ScenariosView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Hack4Europe.ViewModel.SettingsViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase"));
                userType.Activator = Activate_34_SettingsViewModel;
                userType.AddMemberName("ItemClickCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Hack4Europe.View.SettingsView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_SettingsView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Hack4Europe.ViewModel.SignInViewModel
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase"));
                userType.Activator = Activate_36_SignInViewModel;
                userType.AddMemberName("OnClickCommand");
                userType.AddMemberName("Login");
                userType.AddMemberName("Password");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Hack4Europe.View.SignInView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_SignInView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Hack4Europe.View.VoiceRecognitionView
                userType = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_VoiceRecognitionView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_0_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_1_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_1_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_2_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_2_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_3_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_3_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_4_ActionCubeControl_IconCube(object instance)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            return that.IconCube;
        }
        private void set_4_ActionCubeControl_IconCube(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            that.IconCube = (global::System.String)Value;
        }
        private object get_5_ActionCubeControl_NumberCube(object instance)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            return that.NumberCube;
        }
        private void set_5_ActionCubeControl_NumberCube(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            that.NumberCube = (global::System.String)Value;
        }
        private object get_6_ActionCubeControl_TitleCube(object instance)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            return that.TitleCube;
        }
        private void set_6_ActionCubeControl_TitleCube(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            that.TitleCube = (global::System.String)Value;
        }
        private object get_7_ActionCubeControl_ColorCube(object instance)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            return that.ColorCube;
        }
        private void set_7_ActionCubeControl_ColorCube(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            that.ColorCube = (global::Windows.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_8_ActionCubeControl_TypeCube(object instance)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            return that.TypeCube;
        }
        private void set_8_ActionCubeControl_TypeCube(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.ActionCubeControl)instance;
            that.TypeCube = (global::Hack4Europe.UserControls.ActionCubeControl.ActionType)Value;
        }
        private object get_9_MainViewGridControl_TopIconLogoUri(object instance)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            return that.TopIconLogoUri;
        }
        private void set_9_MainViewGridControl_TopIconLogoUri(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            that.TopIconLogoUri = (global::System.String)Value;
        }
        private object get_10_MainViewGridControl_TopImageUri(object instance)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            return that.TopImageUri;
        }
        private void set_10_MainViewGridControl_TopImageUri(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            that.TopImageUri = (global::System.String)Value;
        }
        private object get_11_MainViewGridControl_TopTitle(object instance)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            return that.TopTitle;
        }
        private void set_11_MainViewGridControl_TopTitle(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            that.TopTitle = (global::System.String)Value;
        }
        private object get_12_MainViewGridControl_Children(object instance)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            return that.Children;
        }
        private void set_12_MainViewGridControl_Children(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.MainViewGridControl)instance;
            that.Children = (global::Windows.UI.Xaml.Controls.UIElementCollection)Value;
        }
        private object get_13_HomePageItemControl_Title(object instance)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            return that.Title;
        }
        private void set_13_HomePageItemControl_Title(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_14_HomePageItemControl_Icon(object instance)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            return that.Icon;
        }
        private void set_14_HomePageItemControl_Icon(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            that.Icon = (global::System.String)Value;
        }
        private object get_15_HomePageItemControl_Type(object instance)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            return that.Type;
        }
        private void set_15_HomePageItemControl_Type(object instance, object Value)
        {
            var that = (global::Hack4Europe.UserControls.HomePageItemControl)instance;
            that.Type = (global::Hack4Europe.UserControls.HomePageItemControl.HomePageItemType)Value;
        }
        private object get_16_CommonViewModel_TopIconLogoUri(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            return that.TopIconLogoUri;
        }
        private void set_16_CommonViewModel_TopIconLogoUri(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            that.TopIconLogoUri = (global::System.String)Value;
        }
        private object get_17_CommonViewModel_TopImageUri(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            return that.TopImageUri;
        }
        private void set_17_CommonViewModel_TopImageUri(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            that.TopImageUri = (global::System.String)Value;
        }
        private object get_18_CommonViewModel_TopTitle(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            return that.TopTitle;
        }
        private void set_18_CommonViewModel_TopTitle(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.CommonViewModel)instance;
            that.TopTitle = (global::System.String)Value;
        }
        private object get_19_ViewModelBase_WsOver(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.ViewModelBase)instance;
            return that.WsOver;
        }
        private void set_19_ViewModelBase_WsOver(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.ViewModelBase)instance;
            that.WsOver = (global::System.Boolean)Value;
        }
        private object get_20_FirstViewViewModel_OnClickCommand(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            return that.OnClickCommand;
        }
        private void set_20_FirstViewViewModel_OnClickCommand(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            that.OnClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_21_FirstViewViewModel_Login(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            return that.Login;
        }
        private void set_21_FirstViewViewModel_Login(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            that.Login = (global::System.String)Value;
        }
        private object get_22_FirstViewViewModel_Password1(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            return that.Password1;
        }
        private void set_22_FirstViewViewModel_Password1(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            that.Password1 = (global::System.String)Value;
        }
        private object get_23_FirstViewViewModel_Password2(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            return that.Password2;
        }
        private void set_23_FirstViewViewModel_Password2(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.FirstViewViewModel)instance;
            that.Password2 = (global::System.String)Value;
        }
        private object get_24_HomeViewModel_VoiceCommand(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.HomeViewModel)instance;
            return that.VoiceCommand;
        }
        private void set_24_HomeViewModel_VoiceCommand(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.HomeViewModel)instance;
            that.VoiceCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_25_SettingsViewModel_ItemClickCommand(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.SettingsViewModel)instance;
            return that.ItemClickCommand;
        }
        private void set_25_SettingsViewModel_ItemClickCommand(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.SettingsViewModel)instance;
            that.ItemClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_26_SignInViewModel_OnClickCommand(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            return that.OnClickCommand;
        }
        private void set_26_SignInViewModel_OnClickCommand(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            that.OnClickCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_27_SignInViewModel_Login(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            return that.Login;
        }
        private void set_27_SignInViewModel_Login(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            that.Login = (global::System.String)Value;
        }
        private object get_28_SignInViewModel_Password(object instance)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            return that.Password;
        }
        private void set_28_SignInViewModel_Password(object instance, object Value)
        {
            var that = (global::Hack4Europe.ViewModel.SignInViewModel)instance;
            that.Password = (global::System.String)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember xamlMember = null;
            global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Windows.UI.Color.A":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_0_Color_A;
                xamlMember.Setter = set_0_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_1_Color_B;
                xamlMember.Setter = set_1_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_2_Color_G;
                xamlMember.Setter = set_2_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_3_Color_R;
                xamlMember.Setter = set_3_Color_R;
                break;
            case "Hack4Europe.UserControls.ActionCubeControl.IconCube":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.ActionCubeControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "IconCube", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ActionCubeControl_IconCube;
                xamlMember.Setter = set_4_ActionCubeControl_IconCube;
                break;
            case "Hack4Europe.UserControls.ActionCubeControl.NumberCube":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.ActionCubeControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "NumberCube", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_ActionCubeControl_NumberCube;
                xamlMember.Setter = set_5_ActionCubeControl_NumberCube;
                break;
            case "Hack4Europe.UserControls.ActionCubeControl.TitleCube":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.ActionCubeControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TitleCube", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ActionCubeControl_TitleCube;
                xamlMember.Setter = set_6_ActionCubeControl_TitleCube;
                break;
            case "Hack4Europe.UserControls.ActionCubeControl.ColorCube":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.ActionCubeControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "ColorCube", "Windows.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_ActionCubeControl_ColorCube;
                xamlMember.Setter = set_7_ActionCubeControl_ColorCube;
                break;
            case "Hack4Europe.UserControls.ActionCubeControl.TypeCube":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.ActionCubeControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TypeCube", "Hack4Europe.UserControls.ActionCubeControl.ActionType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_ActionCubeControl_TypeCube;
                xamlMember.Setter = set_8_ActionCubeControl_TypeCube;
                break;
            case "Hack4Europe.UserControls.MainViewGridControl.TopIconLogoUri":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.MainViewGridControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopIconLogoUri", "String");
                xamlMember.Getter = get_9_MainViewGridControl_TopIconLogoUri;
                xamlMember.Setter = set_9_MainViewGridControl_TopIconLogoUri;
                break;
            case "Hack4Europe.UserControls.MainViewGridControl.TopImageUri":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.MainViewGridControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopImageUri", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_MainViewGridControl_TopImageUri;
                xamlMember.Setter = set_10_MainViewGridControl_TopImageUri;
                break;
            case "Hack4Europe.UserControls.MainViewGridControl.TopTitle":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.MainViewGridControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MainViewGridControl_TopTitle;
                xamlMember.Setter = set_11_MainViewGridControl_TopTitle;
                break;
            case "Hack4Europe.UserControls.MainViewGridControl.Children":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.MainViewGridControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Children", "Windows.UI.Xaml.Controls.UIElementCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MainViewGridControl_Children;
                xamlMember.Setter = set_12_MainViewGridControl_Children;
                break;
            case "Hack4Europe.UserControls.HomePageItemControl.Title":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.HomePageItemControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_HomePageItemControl_Title;
                xamlMember.Setter = set_13_HomePageItemControl_Title;
                break;
            case "Hack4Europe.UserControls.HomePageItemControl.Icon":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.HomePageItemControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Icon", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_HomePageItemControl_Icon;
                xamlMember.Setter = set_14_HomePageItemControl_Icon;
                break;
            case "Hack4Europe.UserControls.HomePageItemControl.Type":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.UserControls.HomePageItemControl");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Type", "Hack4Europe.UserControls.HomePageItemControl.HomePageItemType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_HomePageItemControl_Type;
                xamlMember.Setter = set_15_HomePageItemControl_Type;
                break;
            case "Hack4Europe.ViewModel.CommonViewModel.TopIconLogoUri":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.CommonViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopIconLogoUri", "String");
                xamlMember.Getter = get_16_CommonViewModel_TopIconLogoUri;
                xamlMember.Setter = set_16_CommonViewModel_TopIconLogoUri;
                break;
            case "Hack4Europe.ViewModel.CommonViewModel.TopImageUri":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.CommonViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopImageUri", "String");
                xamlMember.Getter = get_17_CommonViewModel_TopImageUri;
                xamlMember.Setter = set_17_CommonViewModel_TopImageUri;
                break;
            case "Hack4Europe.ViewModel.CommonViewModel.TopTitle":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.CommonViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "TopTitle", "String");
                xamlMember.Getter = get_18_CommonViewModel_TopTitle;
                xamlMember.Setter = set_18_CommonViewModel_TopTitle;
                break;
            case "Hack4Europe.ViewModel.ViewModelBase.WsOver":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.ViewModelBase");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "WsOver", "Boolean");
                xamlMember.Getter = get_19_ViewModelBase_WsOver;
                xamlMember.Setter = set_19_ViewModelBase_WsOver;
                break;
            case "Hack4Europe.ViewModel.FirstViewViewModel.OnClickCommand":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.FirstViewViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "OnClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_20_FirstViewViewModel_OnClickCommand;
                xamlMember.Setter = set_20_FirstViewViewModel_OnClickCommand;
                break;
            case "Hack4Europe.ViewModel.FirstViewViewModel.Login":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.FirstViewViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Login", "String");
                xamlMember.Getter = get_21_FirstViewViewModel_Login;
                xamlMember.Setter = set_21_FirstViewViewModel_Login;
                break;
            case "Hack4Europe.ViewModel.FirstViewViewModel.Password1":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.FirstViewViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Password1", "String");
                xamlMember.Getter = get_22_FirstViewViewModel_Password1;
                xamlMember.Setter = set_22_FirstViewViewModel_Password1;
                break;
            case "Hack4Europe.ViewModel.FirstViewViewModel.Password2":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.FirstViewViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Password2", "String");
                xamlMember.Getter = get_23_FirstViewViewModel_Password2;
                xamlMember.Setter = set_23_FirstViewViewModel_Password2;
                break;
            case "Hack4Europe.ViewModel.HomeViewModel.VoiceCommand":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.HomeViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "VoiceCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_24_HomeViewModel_VoiceCommand;
                xamlMember.Setter = set_24_HomeViewModel_VoiceCommand;
                break;
            case "Hack4Europe.ViewModel.SettingsViewModel.ItemClickCommand":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.SettingsViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "ItemClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_25_SettingsViewModel_ItemClickCommand;
                xamlMember.Setter = set_25_SettingsViewModel_ItemClickCommand;
                break;
            case "Hack4Europe.ViewModel.SignInViewModel.OnClickCommand":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.SignInViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "OnClickCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_26_SignInViewModel_OnClickCommand;
                xamlMember.Setter = set_26_SignInViewModel_OnClickCommand;
                break;
            case "Hack4Europe.ViewModel.SignInViewModel.Login":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.SignInViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Login", "String");
                xamlMember.Getter = get_27_SignInViewModel_Login;
                xamlMember.Setter = set_27_SignInViewModel_Login;
                break;
            case "Hack4Europe.ViewModel.SignInViewModel.Password":
                userType = (global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Hack4Europe.ViewModel.SignInViewModel");
                xamlMember = new global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlMember(this, "Password", "String");
                xamlMember.Getter = get_28_SignInViewModel_Password;
                xamlMember.Setter = set_28_SignInViewModel_Password;
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlSystemBaseType
    {
        global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Hack4Europe.Hack4Europe_WindowsPhone_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}



